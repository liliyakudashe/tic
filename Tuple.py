# Картеж (tuple) в Python - это неизменяемый (immutable) упорядоченный набор элементов,
# которые могут быть разных типов данных. Картежи создаются с помощью круглых
# скобок и элементы разделяются запятыми
# Картежи могут содержать другие картежи в качестве элементов, что позволяет
# создавать многомерные структуры данных. Доступ к элементам картежа
# осуществляется по индексу, начиная с нуля.
# Картежи не могут быть изменены после создания, но могут быть
# скомбинированы с другими картежами или списками для создания новых структур данных
tup1 = (1, 2, 3, 4, 5)
tup2 = ('один', 'два', 'три', 'четыре', 'пять')
new_tup = tup1 + tup2
print(new_tup)
print(tup1[0])

# len() - возвращает количество элементов в картеже
len_tup = len(tup1)
print(len_tup)
print('*' * 50)

# max() - возвращает максимальный элемент в картеже.
# Если элементы разных типов, будет выброшено исключение TypeError.
len_max = max(tup1)
print(len_max)
print('*' * 50)

# min() - возвращает минимальный элемент в картеже.
# Если элементы разных типов, будет выброшено исключение TypeError.
len_min = min(tup1)
print(len_min)
print('*' * 50)

# sum() - возвращает сумму всех элементов в картеже.
# Если элементы разных типов, будет выброшено исключение TypeError.
len_sum = sum(tup1)
print(len_sum)
print('*' * 50)

# index() - возвращает индекс первого вхождения указанного элемента в картеже.
# Если элемент не найден, будет выброшено исключение ValueError.
tup_index = tup2.index('один')
print(tup_index)
print(tup1.index(4))

# count() - возвращает количество вхождений указанного элемента в картеже
print(tup1.count(2))

# Кортеж из других кортежей
nested_tuple = ((1, 2), ('a', 'b'))
print(nested_tuple)
print('*' * 50)

# Кортеж из списков
my_tuple1 = ([1, 2, 3], ['a', 'b', 'c'])
print(my_tuple1)
print('*' * 50)

# Кортеж из словарей
my_tuple2 = ({'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25})
print(my_tuple2)
print('*' * 50)

# Кортеж из разных типов данных
mixed_tuple = (1, 'hello', [1, 2, 3], {'a': 10})
print(mixed_tuple)
print('*' * 50)

# Кортеж с изменяемыми элементами
# если внутри кортежа находятся изменяемые элементы,
# например списки, словари или множества, то их значения можно изменить.
mutable_tuple = ([1, 2, 3], [4, 5, 6])
print('Исходный кортеж:', mutable_tuple)
mutable_tuple[0][1] = 10 # Меняем второй элемент в первом списке
mutable_tuple[1].append(8)
print('Изменённый кортеж:', mutable_tuple)

# Кортежи занимают в памяти меньше места, чем списки
a = (1, 2, 3, 4, 5, 6)
b = [1, 2, 3, 4, 5, 6]
print(a.__sizeof__())
print(b.__sizeof__())

# Создаём словарь с кортежем в качестве ключа
my_dict = {('a', 1): ('Один',), ('b', 2): ('Два',)}
# Обращаемся к элементам словаря по кортежу в качестве ключа
print(my_dict[('a', 1)])
print(my_dict[('b', 2)])
my_dict[('c', 3)] = ('Три',)
print(my_dict)
my_dict[('a', 1)] = ('Четыре',)
print(my_dict)

# Создать кортеж в Python можно пятью способами
# С помощью круглых скобок
my_tuple1 = (1, 2, 3)
# Без круглых скобок
my_tuple2 = 1, 2, 3
# Используя встроенную функцию tuple()
# my_tuple3 = tuple(1, 2, 3)
# С помощью оператора упаковки
a = 1
b = 2
c = 3
my_tuple4 = a, b, c
# Из итерируемого элемента, например строки, с помощью функции tuple()
my_tuple5 = tuple('Привет')
print(my_tuple5)

# Упаковка (packing) и распаковка (unpacking) — это операции, которые позволяют
# создавать кортеж из набора значений и извлекать значения из кортежа в переменные
my_tuple6 = 1, 2, 3, 'привет'

my_tuple7 = (5, 6, 5, 12, 45, 78)
for i in range(len(my_tuple7)):
    n = my_tuple7[i]
    print(n)
set_new = {5: 5, 4: 78, 7: 3, 1: 57, 5: 1}
print(set_new)
print(type(set_new))